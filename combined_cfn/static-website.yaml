AWSTemplateFormatVersion: "2010-09-09"
Description: "Combined CloudFormation template for static website hosting with S3, Route 53, and ACM"

Parameters:
  DomainName:
    Type: String
    Description: The domain name for the hosted zone (e.g., example.com)
  BucketName:
    Type: String
    Description: "Base name for the S3 bucket"
  TagValue:
    Type: String
    Description: "The tag value for resources"

Resources:
  # Logging Bucket Configuration from Part 3
  LoggingBucket:
    Metadata:
      # Suppress cfn_nag warning for W35
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "access logs bucket has no other use case"
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain # Retain the bucket when the stack is deleted
    UpdateReplacePolicy: Retain # Retain the bucket when the stack is updated
    Properties:
      BucketName: !Sub
        - ${BaseName}-logs-${RandomString}
        - BaseName: !Ref "BucketName"
          RandomString:
            !Select [
              2,
              !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]],
            ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      Tags:
        - Key: workload
          Value: !Ref "TagValue"

  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref "LoggingBucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:PutObject"
            Condition:
              ArnLike:
                "aws:SourceArn":
                  - !GetAtt
                    - "StaticWebsiteBucket"
                    - "Arn"
            Effect: "Allow"
            Principal:
              Service: "logging.s3.amazonaws.com"
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${LoggingBucket}/*"

  # Static Website Bucket Configuration from Part 3
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain # Retain the bucket when the stack is deleted
    UpdateReplacePolicy: Retain #  Retain the bucket when the stack is updated
    Properties:
      BucketName: !Sub
        - ${BaseName}-${RandomString}
        - BaseName: !Ref "BucketName"
          RandomString:
            !Select [
              2,
              !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]],
            ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      LoggingConfiguration:
        DestinationBucketName: !Ref "LoggingBucket"
        LogFilePrefix: "access-logs/"
      Tags:
        - Key: workload
          Value: !Ref "TagValue"

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F16
            reason: "will be replaced as CloudFront OAI will be used"
    Properties:
      Bucket: !Ref "StaticWebsiteBucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:GetObject"
            Effect: "Allow"
            Resource: !Sub "arn:${AWS::Partition}:s3:::${StaticWebsiteBucket}/*"
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # Route 53 Configuration from Part 4
  PublicHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: !Sub "Public hosted zone for ${DomainName}"

  # ACM Certificate Configuration from Part 5
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub "www.${DomainName}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref PublicHostedZone
        - DomainName: !Sub "www.${DomainName}"
          HostedZoneId: !Ref PublicHostedZone
      Tags:
        - Key: workload
          Value: !Ref TagValue

  # CloudFront Distribution Configuration from Part 6
  CloudFrontOriginAccessControl:
    Type: "AWS::CloudFront::OriginAccessControl"
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-OAC"
        Description: "Origin Access Control for S3"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        ViewerCertificate:
          AcmCertificateArn: !GetAtt Certificate.Id
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Enabled: true
        PriceClass: PriceClass_100 # US, Canada, Europe (not Middle East) Edge Locations
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /error.html
        Aliases:
          - !Ref DomainName
          - !Sub "www.${DomainName}"
        Comment: !Sub "CloudFront distribution for ${BucketName}"
        Origins:
          - DomainName: !Sub "${BucketName}.s3.${AWS::Region}.amazonaws.com"
            Id: StaticWebsiteBucket
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        DefaultCacheBehavior:
          TargetOriginId: StaticWebsiteBucket
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # Managed-CORS-S3Origin
      Tags:
        - Key: workload
          Value: !Ref TagValue

  # Route 53 Record Configuration
  ApexAliasRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneId: !GetAtt PublicHostedZone.Id
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # Fixed CloudFront hosted zone ID
        EvaluateTargetHealth: false

  WwwAliasRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneId: !GetAtt PublicHostedZone.Id
      Name: !Sub "www.${DomainName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # Fixed CloudFront hosted zone ID
        EvaluateTargetHealth: false

Outputs:
  WebsiteBucketName:
    Description: "Name of S3 bucket to hold website content"
    Value: !Ref StaticWebsiteBucket

  WebsiteBucketDomainName:
    Description: "Domain name of S3 bucket to hold website content"
    Value: !GetAtt StaticWebsiteBucket.DomainName

  HostedZoneId:
    Description: "Hosted Zone ID"
    Value: !Ref PublicHostedZone

  NameServers:
    Description: "Nameservers for the hosted zone. Update these at your domain registrar."
    Value: !Join
      - ", "
      - !GetAtt PublicHostedZone.NameServers

  CertificateArn:
    Description: "ARN of the created certificate"
    Value: !Ref Certificate

  DistributionDomainName:
    Description: "CloudFront Distribution Domain Name"
    Value: !GetAtt CloudFrontDistribution.DomainName
